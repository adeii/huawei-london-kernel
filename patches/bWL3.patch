From edce29c08961ec8c72974e1894bc6f908c8d036f Mon Sep 17 00:00:00 2001
From: andip71 <andreasp@gmx.de>
Date: Thu, 31 Aug 2017 12:11:20 +0200
Subject: [PATCH] boeffla_wl_blocker: update to wakelock blocker driver v1.1.0

There are now two lists:
- the previously existing list of user defined wakelocks to block
- a new list called "wakelock_blocker_default" which comes prepopulated with the most common
  and safe wakelocks to block:

    qcom_rx_wakelock;wlan;wlan_wow_wl;wlan_extscan_wl;netmgr_wl;NETLINK

A combination of both wakelock lists will be blocked finally.
---
 drivers/base/power/boeffla_wl_blocker.c | 90 +++++++++++++++++++------
 drivers/base/power/boeffla_wl_blocker.h | 23 +++++++
 drivers/base/power/wakeup.c             | 11 +--
 3 files changed, 101 insertions(+), 23 deletions(-)
 create mode 100644 drivers/base/power/boeffla_wl_blocker.h

diff --git a/drivers/base/power/boeffla_wl_blocker.c b/drivers/base/power/boeffla_wl_blocker.c
index 03bb67e7651e..e9c93ce97ce9 100644
--- a/drivers/base/power/boeffla_wl_blocker.c
+++ b/drivers/base/power/boeffla_wl_blocker.c
@@ -1,7 +1,7 @@
 /*
- * Author: andip71, 29.08.2017
+ * Author: andip71, 01.09.2017
  *
- * Version 1.0.1
+ * Version 1.1.0
  *
  * This software is licensed under the terms of the GNU General Public
  * License version 2, as published by the Free Software Foundation, and
@@ -17,6 +17,10 @@
 /*
  * Change log:
  *
+ * 1.1.0 (01.09.2017)
+ *   - By default, the following wakelocks are blocked in an own list
+ *     qcom_rx_wakelock, wlan, wlan_wow_wl, wlan_extscan_wl, NETLINK
+ *
  * 1.0.1 (29.08.2017)
  *   - Add killing wakelock when currently active
  *
@@ -31,25 +35,43 @@
 #include <linux/device.h>
 #include <linux/miscdevice.h>
 #include <linux/printk.h>
-
-
-#define BOEFFLA_WL_BLOCKER_VERSION	"1.0.1"
+#include "boeffla_wl_blocker.h"
 
 
 /*****************************************/
 // Variables
 /*****************************************/
 
-extern char list_wl[255];
-extern char list_wl_search[257];
+char list_wl[LENGTH_LIST_WL] = {0};
+char list_wl_default[LENGTH_LIST_WL_DEFAULT] = {0};
+
+extern char list_wl_search[LENGTH_LIST_WL_SEARCH];
 extern bool wl_blocker_active;
 extern bool wl_blocker_debug;
 
 
+/*****************************************/
+// internal functions
+/*****************************************/
+
+static void build_search_string(char *list1, char *list2)
+{
+	// store wakelock list and search string (with semicolons added at start and end)
+	sprintf(list_wl_search, ";%s;%s;", list1, list2);
+
+	// set flag if wakelock blocker should be active (for performance reasons)
+	if (strlen(list_wl_search) > 5)
+		wl_blocker_active = true;
+	else
+		wl_blocker_active = false;
+}
+
+
 /*****************************************/
 // sysfs interface functions
 /*****************************************/
 
+// show list of user configured wakelocks
 static ssize_t wakelock_blocker_show(struct device *dev, struct device_attribute *attr,
 			    char *buf)
 {
@@ -58,37 +80,61 @@ static ssize_t wakelock_blocker_show(struct device *dev, struct device_attribute
 }
 
 
+// store list of user configured wakelocks
 static ssize_t wakelock_blocker_store(struct device * dev, struct device_attribute *attr,
 			     const char * buf, size_t n)
 {
 	int len = n;
 
-	// only strings up to 255 characters are allowed
-	if (len > 255)
+	// check if string is too long to be stored
+	if (len > LENGTH_LIST_WL)
 		return -EINVAL;
 
-	// set flag if wakelock blocker should be active (for performance reasons)
-	if (len > 1)
-		wl_blocker_active = true;
-	else
-		wl_blocker_active = false;
-
-	// store wakelock list and search string (with semicolons added at start and end)
+	// store user configured wakelock list and rebuild search string
 	sscanf(buf, "%s", list_wl);
-	sprintf(list_wl_search, ";%s;", list_wl);
+	build_search_string(list_wl_default, list_wl);
+
+	return n;
+}
+
+
+// show list of default, predefined wakelocks
+static ssize_t wakelock_blocker_default_show(struct device *dev, struct device_attribute *attr,
+			    char *buf)
+{
+	// return list of wakelocks to be blocked
+	return sprintf(buf, "%s\n", list_wl_default);
+}
+
+
+// store list of default, predefined wakelocks
+static ssize_t wakelock_blocker_default_store(struct device * dev, struct device_attribute *attr,
+			     const char * buf, size_t n)
+{
+	int len = n;
+
+	// check if string is too long to be stored
+	if (len > LENGTH_LIST_WL_DEFAULT)
+		return -EINVAL;
+
+	// store default, predefined wakelock list and rebuild search string
+	sscanf(buf, "%s", list_wl_default);
+	build_search_string(list_wl_default, list_wl);
 
 	return n;
 }
 
 
+// show debug information of driver internals
 static ssize_t debug_show(struct device *dev, struct device_attribute *attr, char *buf)
 {
 	// return current debug status
-	return sprintf(buf, "Debug status: %d\n\nList: %s\nSearch list: %s\nActive: %d\n",
-					wl_blocker_debug, list_wl, list_wl_search, wl_blocker_active);
+	return sprintf(buf, "Debug status: %d\n\nUser list: %s\nDefault list: %s\nSearch list: %s\nActive: %d\n",
+					wl_blocker_debug, list_wl, list_wl_default, list_wl_search, wl_blocker_active);
 }
 
 
+// store debug mode on/off (1/0)
 static ssize_t debug_store(struct device *dev, struct device_attribute *attr,
 						const char *buf, size_t count)
 {
@@ -124,12 +170,14 @@ static ssize_t version_show(struct device *dev, struct device_attribute *attr, c
 
 // define objects
 static DEVICE_ATTR(wakelock_blocker, 0644, wakelock_blocker_show, wakelock_blocker_store);
+static DEVICE_ATTR(wakelock_blocker_default, 0644, wakelock_blocker_default_show, wakelock_blocker_default_store);
 static DEVICE_ATTR(debug, 0664, debug_show, debug_store);
 static DEVICE_ATTR(version, 0664, version_show, NULL);
 
 // define attributes
 static struct attribute *boeffla_wl_blocker_attributes[] = {
 	&dev_attr_wakelock_blocker.attr,
+	&dev_attr_wakelock_blocker_default.attr,
 	&dev_attr_debug.attr,
 	&dev_attr_version.attr,
 	NULL
@@ -161,6 +209,10 @@ static int boeffla_wl_blocker_init(void)
 		return 0;
 	}
 
+	// initialize default list
+	sprintf(list_wl_default, "%s", LIST_WL_DEFAULT);
+	build_search_string(list_wl_default, list_wl);
+
 	// Print debug info
 	printk("Boeffla WL blocker: driver version %s started\n", BOEFFLA_WL_BLOCKER_VERSION);
 
diff --git a/drivers/base/power/boeffla_wl_blocker.h b/drivers/base/power/boeffla_wl_blocker.h
new file mode 100644
index 000000000000..416eaa5ec4a5
--- /dev/null
+++ b/drivers/base/power/boeffla_wl_blocker.h
@@ -0,0 +1,23 @@
+/*
+ * Author: andip71, 01.09.2017
+ *
+ * Version 1.1.0
+ *
+ * This software is licensed under the terms of the GNU General Public
+ * License version 2, as published by the Free Software Foundation, and
+ * may be copied, distributed, and modified under those terms.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#define BOEFFLA_WL_BLOCKER_VERSION	"1.1.0"
+
+#define LIST_WL_DEFAULT				"qcom_rx_wakelock;wlan;wlan_wow_wl;wlan_extscan_wl;netmgr_wl;NETLINK"
+
+#define LENGTH_LIST_WL				255
+#define LENGTH_LIST_WL_DEFAULT		100
+#define LENGTH_LIST_WL_SEARCH		LENGTH_LIST_WL + LENGTH_LIST_WL_DEFAULT + 5
diff --git a/drivers/base/power/wakeup.c b/drivers/base/power/wakeup.c
index 7e1f75454ce7..81e1ff1c3a6b 100644
--- a/drivers/base/power/wakeup.c
+++ b/drivers/base/power/wakeup.c
@@ -22,8 +22,9 @@
 
 
 #ifdef CONFIG_BOEFFLA_WL_BLOCKER
-char list_wl[255] = {0};
-char list_wl_search[257] = {0};
+#include "boeffla_wl_blocker.h"
+
+char list_wl_search[LENGTH_LIST_WL_SEARCH] = {0};
 bool wl_blocker_active = false;
 bool wl_blocker_debug = false;
 
@@ -566,6 +567,7 @@ static void wakeup_source_activate(struct wakeup_source *ws)
 static bool check_for_block(struct wakeup_source *ws)
 {
 	char wakelock_name[52] = {0};
+	int length;
 
 	// if debug mode on, print every wakelock requested
 	if (wl_blocker_debug)
@@ -578,8 +580,9 @@ static bool check_for_block(struct wakeup_source *ws)
 	// only if ws structure is valid
 	if (ws)
 	{
-		// wake lock names which are longer than 50 chars are not handled
-		if (strlen(ws->name) > 50)
+		// wake lock names handled have maximum length=50 and minimum=1
+		length = strlen(ws->name);
+		if ((length > 50) || (length < 1))
 			return false;
 
 		// check if wakelock is in wake lock list to be blocked
